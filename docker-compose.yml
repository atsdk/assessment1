version: '3.4'

x-app-volume:
  &app
  type: bind
  source: ./app/
  target: /code/app/
  consistency: cached

x-data-volume:
  &data
  type: bind
  source: ./data
  target: /code/data
  consistency: cached

services:
  app:
    build:
      context: .
      dockerfile: $PWD/containers/app/Dockerfile.dev
    image: &app_image app
    depends_on:
      postgres:
        condition: service_healthy
    links: 
      - postgres
    volumes:
      - *app
      - *data
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - $PWD/containers/app/.env
      - $PWD/containers/postgres/.env
    command: uvicorn app.server:app --host 0.0.0.0 --port 8000 --reload

  postgres:
    image: postgres:15.2
    volumes:
      - postgresql-database:/var/lib/postgresql/data:delegated
    ports:
    - "5432:5432"
    env_file:
    - $PWD/containers/postgres/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.7.12-management
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    ports:
      - "5673:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  celery_worker:
    image: *app_image
    restart: always
    environment:
      - C_FORCE_ROOT=true
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    depends_on:
      - "rabbitmq"
      - "postgres"
    volumes:
      - *app
      - *data
    env_file:
      - $PWD/containers/app/.env
    command: celery -A app.background_tasks.worker.celery_app worker -l info --concurrency=4

volumes:
  postgresql-database:
    name: postgresql-database
  rabbitmq:
    name: rabbitmq
